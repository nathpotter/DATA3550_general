# -*- coding: utf-8 -*-
"""1241_DATA3550_Assignment1_NathakanTechadis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zWBnxmSLRzo1watVaOvp0w4dy7HTY_cT

#### **Assignment 1: Nathakan Techadis**
File: Assignment 1_v1.0.pdf

#### **1.Calories Burned During A Workout**
The following equations estimate the calories burned when exercising ([source](https://web.archive.org/web/20121021230025/http:/fitnowtraining.com/2012/01/formula-for-calories-burned/)):

*    Women: Calories = ( (Age x 0.074) + (Weight x 0.05741) + (Heart Rate x 0.4472) — 20.4022 ) x Time / 4.184
*    Men: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309) — 55.0969 ) x Time / 4.184

**Write a program** using inputs age (years), weight (pounds), heart rate (beats per minute), and time (minutes), respectively. Output calories burned for women and men. Output each floating-point value with two digits after the decimal point.
"""

# Women: Calories Function
def calc_women_cal(age, weight, HR, time):
  return (age*0.074 + weight*0.05741 + HR*0.4472 - 20.4022)*(time/4.184)

# Men: Calories Function
def calc_men_cal(age, weight, HR, time):
  return (age*0.2017 + weight*0.09036 + HR*0.6309 - 55.0969)*(time/4.184)

# Convert function
def try_parse_int(value):
  try:
    result = int(value)
    if result >= 0:
      return True, int(value)  #Can convert return (True, value)
    else:
      return False, None
  except ValueError:
    return False, None  # Cannot convert return (False, None)

def readInput(name, unit):
  value = input(f"Enter {name} ({unit}): ")
  bool1, num    = try_parse_int(value)
  while bool1 == False:
    print(f"Invalid input. Please enter positive number.")
    value     = input(f"Enter {name} ({unit}): ")
    bool1, num    = try_parse_int(value)
  return num

# MAIN
def main():
  # Input and validate inputs
  Age     = readInput("Age", "years")
  Weight  = readInput("Weight", "pounds")
  HR      = readInput("Heart Rate", "beats per minute")
  Time    = readInput("Time", "minutes")

  # Call functions
  total_women = calc_women_cal(Age, Weight, HR, Time)
  total_men   = calc_men_cal(Age, Weight, HR, Time)
  print(f"Total Calories Burned During Workouts for women: {total_women:,.2f}")
  print(f"Total Calories Burned During Workouts for   men: {total_men:,.2f}")

# Call MAIN
main()

"""#### **2.Simple statistics**

You are given 4 floating-point numbers. Use a string formatting expression with conversion specifiers to output their product and their average as integers (rounded) and floating-point numbers.

*   Output each rounded integer using the following:
print('{:.0f}'.format(your_value))

*   Output each floating-point value with three digits after the decimal point, which can be achieved as follows:
print('{:.3f}'.format(your_value))
"""

# Average Function
def average(num):
  return sum(num)/len(num)

# Convert function
def try_parse_float(value):
    try:
        return True, float(value)  #Can convert return (True, value)
    except ValueError:
        return False, None  # Cannot convert return (False, None)

# MAIN
def main():
  # list of number
  num_list = []

  # input and validate input
  input_num = input("Enter number (q to calculate average): ")
  while input_num.lower() != "q":
    bool1, num = try_parse_float(input_num)
    if bool1 == True:
      num_list.append(num)
    else:
      print("Invalid input. Please enter only number.")
    input_num = input("Enter number (q to calculate average): ")

  # Calculate average
  print("Enter Numbers are as follows:")
  for i in num_list:
    print('- {:.0f}'.format(i))
  print('Average is {:.3f}'.format(average(num_list)))

# call MAIN
main()

"""#### **3. Seasons**
Write a program that takes a date as input and outputs the date's season. The input is a string to represent the month and an int to represent the day. In addition, check if the string and int are valid (an actual month and day).

The dates for each season are:
* Spring: March 20 - June 20
* Summer: June 21 - September 21
* Autumn: September 22 - December 20
* Winter: December 21 - March 19
"""

import datetime

# Season Function
def season(month, day):
  # CONSTANTS
  SPRING_START  = datetime.date(2000, 3, 20)
  SUMMER_START  = datetime.date(2000, 6, 21)
  AUTUMN_START  = datetime.date(2000, 9, 22)
  WINTER_START  = datetime.date(2000, 12, 21)
  STR_SPRING    = "Spring"
  STR_SUMMER    = "Summer"
  STR_AUTUMN    = "Autumn"
  STR_WINTER    = "Winter"

  # Convert input to date
  booldate, input_date = validate_date(month, day)

  # Determine the season based on the date ranges
  if input_date >= SPRING_START   and input_date < SUMMER_START:
    return STR_SPRING
  elif input_date >= SUMMER_START and input_date < AUTUMN_START:
    return STR_SUMMER
  elif input_date >= AUTUMN_START and input_date < WINTER_START:
    return STR_AUTUMN
  else:
    return STR_WINTER

# get month number
def get_month_num(month):
  MONTH_SHORT = ['jan', 'feb', 'mar', 'apr', 'may', 'jun',
                 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
  MONTH_FULL = ['january', 'february', 'march', 'april', 'may', 'june',
                'july', 'august', 'september', 'october', 'november', 'december']
  try:
    return MONTH_FULL.index(month.lower()) + 1
  except ValueError:
    try:
      return MONTH_SHORT.index(month.lower()) + 1
    except ValueError:
      return -1
    return -1

# Validate date function
def validate_date(month, day):
  try:
    date_Str = datetime.date(2000, month, day)
    return True, date_Str #Can convert return (True, value)
  except ValueError:
    return False, None  # Cannot convert return (False, None)

# Convert function
def try_parse_int(value):
    try:
        return True, int(value)  #Can convert return (True, value)
    except ValueError:
        return False, None  # Cannot convert return (False, None)

# MAIN
def main():
  month = input('Enter a month: ')
  month_num = get_month_num(month)

  # Validation month input
  while month_num == -1:
    print("Invalid month!")
    month = input('Enter a month: ')
    month_num = get_month_num(month)

  day = input('Enter a day: ')
  bool1, day_num  = try_parse_int(day)
  bool2, date_str = validate_date(month_num, day_num)

  # Validaton date input
  while bool1 == False or bool2 == False:
    print("Invalid day!")
    day = input('Enter a day: ')
    bool1, day_num  = try_parse_int(day)
    bool2, date_str = validate_date(month_num, day_num)

  print(season(month_num, day_num))

# call MAIN
main()

"""#### **4. Print string in reverse**

Write a program that takes in a line of text as input, and outputs that line of text in reverse. The program repeats, ending when the user enters "Done", "done", or "d" for the line of text.
"""

# Reverse Text
def reverse_str(text):
  return text[::-1]

# MAIN
def main():
  text = input("Enter text (d, Done to quit): ")
  while text.lower() not in ['d', 'done']:
    print(reverse_str(text))
    text = input("Enter text (d, Done to quit): ")

  if text.lower() in ['d', 'done']:
    print("Program exit!")

main()

"""#### **5. Step counter**

A pedometer treats walking 2,000 steps as walking 1 mile. Write a program whose input is the number of steps and whose output is the miles walked. Your program must define and call the following function. The function should return the number of miles walked.
"""

# convert steps to miles function
def step_to_mile(steps):
  if steps < 0:
    return 0
  else:
    return steps/2000

# Convert function
def try_parse_int(value):
    try:
        return True, int(value)  #Can convert return (True, value)
    except ValueError:
        return False, None  # Cannot convert return (False, None)

# MAIN
def main():
  in_steps = input("Enter steps: ")
  bool1, steps_num = try_parse_int(in_steps)
  while bool1 == False:
    print("Invalid input!")
    in_steps = input("Enter steps: ")
    bool1, steps_num = try_parse_int(in_steps)

  print(f"The number of miles walked is {step_to_mile(steps_num):,.2f} miles")

# Call MAIN
main()